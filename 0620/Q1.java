/*
* 메소드 영역 (Method Area)
* Static 영역이라고도 부른다
* JVM이 실행될 때, Class가 로딩 될 때 생성
* 바이트 코드 파일을 읽은 내용이 저장되는 영역으로 클래스별로 상수, 정적 필드,
  메소드 코드, 생성자 코드 등이 저장된다
* Static 영역에 있는 것은 어디서든 접근 가능
* JVM이 종료 시 메모리에서 해제
* 프로그램이 종료되기 전까지 메모리상에 존재하기 때문에
  무분별하게 사용될 경우 메모리 부족 현상이 발생할 수 있다
*
*
* 힙 영역 (Heap)
* 객체가 생성되는 영역
* 참조형 데이터 객체의 실제 데이터가 저장되는 공간
* 스택 영역에는 실제 데이터가 존재하는 힙 영역의 참조값을 가지고 있다
* new 키워드로 인스턴스를 생성할 때 힙 영역에는 생성된 객체가 저장,
  스택 영역에는 생성된 객체의 주소 값(Reference)이 저장된다
* Reference를 통해서만 힙 영역의 데이터들에 접근, 핸들링 할 수 있다.
* 호출이 종료되도 삭제되지 않는다. -> GC(가비지 컬렉터)에 의해 메모리에서 해제된다.
* 쓰레드가 몇개가 존재하든, 단 하나의 영역만 존재한다.
  (Stack 영역의 경우 쓰레드 별로 1개씩 생성된다.)
*
*
* 스택 영역 (Stack)
* 메소드를 호출할 때마다 생성되는 프레임이 저장되는 영역
* 메소드 호출이 끝나면 프레임은 자동 제거된다
* 프레임 내부에는 로컬 변수, 스택이 있다
* 기본 자료형(원시 자료형, Primitive type), 지역변수, 매개변수가 저장되는 메모리
* 여기에서 기본 타입 변수와 참조 타입 변수가 생성되고 제거 된다
* 각 Thread 마다 자신만의 Stack 을 가진다. (1:1) - (Thread : Stack)
  Thread는 내부적으로 Static, Heap, Stack 영역을 가진다.
  Thread는 다른 Thread에 접근 할 수 없지만, static, Heap 영역을 공유하여 사용 가능.
*
*
*
*
*
*
*
*
* */